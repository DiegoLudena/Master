# -*- coding: utf-8 -*-
"""IABD_MP2_T02_02.ypynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13rzft21puDKFm8mzCTnv7W5AyLH9tt0w

Tenemos el siguiente problema de regresión lineal univariable:
Una empresa quiere predecir las ventas de un producto basándose en su presupuesto de publicidad en distintas plataformas. Se tienen datos de las ventas (en miles de unidades) y el gasto en publicidad en televisión (en miles de dólares).
Desarrolla un modelo de regresión lineal simple para predecir las ventas en función del gasto en publicidad.
Ejecuta paso por paso el proceso hasta encontrar la recta resultado de la regresión, y escribe el valor predicho para un gasto de 30.000€.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import numpy as np

# Crear el DataFrame con los datos
data = {
    'Gasto_publicidad': [5, 10, 15, 20, 25, 7, 12, 17, 22, 27],  # Gasto en publicidad en TV (en miles de euros)
    'Ventas': [8, 12, 14, 18, 22, 9.5, 13, 15.8, 19.3, 22.5]  # Ventas (en miles de unidades)
}
df = pd.DataFrame(data)

# Definir las variables independiente (X) y dependiente (Y)
X = df[['Gasto_publicidad']]
Y = df['Ventas']

# Dividir el conjunto de datos en entrenamiento y prueba
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de regresión lineal
model = LinearRegression()
model.fit(X_train, Y_train)

# Hacer predicciones en un rango continuo de valores para la línea de regresión,
# con valores fuera de los datos de entrenamiento para poder extrapolar la gráfica.
X_range = pd.DataFrame({'Gasto_publicidad': np.linspace(0, 40, 100)})
Y_pred = model.predict(X_range)

# Predecir el valor para un gasto de 30.000 euros en publicidad
# Usar un DataFrame para evitar un warning al ser distinto al dato de entrenamiento
gasto_nuevo = pd.DataFrame({'Gasto_publicidad': [30]})
prevision = model.predict(gasto_nuevo)[0]

# Mostrar los coeficientes, intersección y la predicción
print(f'Intersección: {model.intercept_}')
print(f'Coeficientes: {model.coef_}')
print(f'Predicción para un gasto de 30.000€ en publicidad: {prevision:.2f} miles de unidades')

# Graficar la nube de puntos de los datos originales
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Gasto_publicidad', y='Ventas', data=df, color='blue', label='Datos')

# Dibujar la línea de regresión usando los datos de entrenamiento
plt.plot(X_range, Y_pred, color='red', label='Línea de Regresión (entrenamiento)')

# Añadir el punto predicho al gráfico
plt.scatter(30, prevision, color='green', s=100, label='Predicción (30, {:.2f})'.format(prevision))

# Calcular la banda de incertidumbre
pred_error = Y_train - model.predict(X_train)
std_error = np.std(pred_error)
plt.fill_between(X_range['Gasto_publicidad'], Y_pred - std_error, Y_pred + std_error, color='gray', alpha=0.3, label='Banda de Incertidumbre')

# Poner nombre al gráfico, ejes y leyenda
plt.xlabel('Gasto en Publicidad en TV (miles de euros)')
plt.ylabel('Ventas (miles de unidades)')
plt.title('Relación entre gasto en publicidad y unidades vendidas')
plt.legend()
plt.show()