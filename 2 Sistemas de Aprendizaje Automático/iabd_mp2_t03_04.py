# -*- coding: utf-8 -*-
"""IABD_MP2_T03_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RNqj6iXWxQt9n7WUHioVK7EZyXIGiHMA

Nos planteamos un problema de clasificación binaria, en que debemos clasificar para un conjunto de imágenes entre si contienen o no contienen semáforos en ellas.
Entrenamos un modelo random forest, y evaluaremos el sistema sobre un test set formado por 20 imágenes, las 15 primeras no contienen semáforos y las 5 últimas sí las contienen.
Aplicamos el modelo sobre las 20 imágenes y el sistema clasifica las 13 primeras como no semáforo, las siguientes 5 como semáforo y las dos últimas como no semáforo.
Calcula la matriz de confusión, el valor de TP, FP, TN, FN, el valor de accuracy, la precisión, el recall y el F1 score.
La idea de este ejercicio es comparar cómo se hace este proceso a mano con cómo se realiza en Python. Aquí está solamente la parte programada.
"""

import numpy as np
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

# Valores reales (ground truth)
y_true = [0] * 15 + [1] * 5  # 15 imágenes sin semáforo, 5 con semáforo

# Predicciones del modelo
y_pred = [0] * 13 + [1] * 5 + [0] * 2  # Clasificaciones del modelo

# Matriz de confusión
cm = confusion_matrix(y_true, y_pred)
print("Matriz de Confusión:")
print(cm)

# Valores TP, FP, TN, FN
TN = cm[0, 0]  # Verdaderos Negativos
FP = cm[0, 1]  # Falsos Positivos
FN = cm[1, 0]  # Falsos Negativos
TP = cm[1, 1]  # Verdaderos Positivos

print("\nTP:", TP)
print("FP:", FP)
print("TN:", TN)
print("FN:", FN)

# Accuracy
accuracy = accuracy_score(y_true, y_pred)
print("\nAccuracy:", accuracy)

# Precisión
precision = precision_score(y_true, y_pred)
print("Precisión:", precision)

# Recall (Sensibilidad)
recall = recall_score(y_true, y_pred)
print("Recall:", recall)

# F1-score
f1 = f1_score(y_true, y_pred)
print("F1-score:", f1)