# -*- coding: utf-8 -*-
"""IABD_MP5_T03_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KAOpwooSlVlIEDXTS6ieMcN_LNcbl6-Q

EJERCICIO 3: Crea un programa en Python que:
1.	Reciba como entrada:
o	El nombre del archivo que se quiere analizar.
o	El algoritmo de hashing que se desea utilizar (MD5 o SHA-256).
2.	Calcule el hash:
o	Lee el archivo byte a byte.
o	Calcula el hash del archivo utilizando el algoritmo elegido (MD5 o SHA-256).
3.	Imprima:
o	El hash del archivo en formato hexadecimal.
4.	Opcional:
o	Implementa una función adicional que compare el hash calculado con un hash previamente conocido para verificar si el archivo ha sido modificado.
****Usa la librería hashlib
"""

import hashlib
import os


def calcular_hash(nombre_archivo, algoritmo):
  """Calcula el hash de un archivo.

  Args:
    nombre_archivo: El nombre del archivo que se quiere analizar.
    algoritmo: El algoritmo de hashing que se desea utilizar (MD5 o SHA-256).

  Returns:
    El hash del archivo en formato hexadecimal.
  """

  # Crea un objeto hash.
  if algoritmo == "MD5":
    hasher = hashlib.md5()
  elif algoritmo == "SHA-256":
    hasher = hashlib.sha256()
  else:
    raise ValueError("Algoritmo de hashing no válido.")

  # Lee el archivo byte a byte.
  with open(nombre_archivo, "rb") as f:
    while True:
      chunk = f.read(4096)
      if not chunk:
        break
      hasher.update(chunk)

  # Calcula el hash del archivo.
  hash_hexadecimal = hasher.hexdigest()

  # Imprime el hash del archivo.
  print(f"El hash {algoritmo} del archivo {nombre_archivo} es: {hash_hexadecimal}")

  return hash_hexadecimal


def verificar_integridad(nombre_archivo, algoritmo, hash_conocido):
  """Compara el hash calculado con un hash conocido."""
  hash_calculado = calcular_hash(nombre_archivo, algoritmo)
  if hash_calculado == hash_conocido:
    print("El archivo no ha sido modificado.")
  else:
    print("El archivo ha sido modificado.")



# Inicialmente habíamos pensado usar input, pero es muy fácil cometer errores. Mejor hacer un pequeño menú.
# También gestionamos errores de números para evitar errores que cierren el programa de golpe.
# Obtener la lista de archivos en el directorio actual
archivos = [f for f in os.listdir('.') if os.path.isfile(f)]

# Mostrar la lista de archivos al usuario
print("Selecciona un archivo:")
for i, archivo in enumerate(archivos):
  print(f"{i+1}. {archivo}")

# Obtener la selección del archivo con manejo de errores
while True:
  try:
    seleccion_archivo = int(input("Introduce el número del archivo: ")) - 1
    if 0 <= seleccion_archivo < len(archivos):
      nombre_archivo = archivos[seleccion_archivo]
      break
    else:
      print("Número de archivo inválido. Inténtalo de nuevo.")
  except ValueError:
    print("Entrada inválida. Debes introducir un número.")

# Mostrar el menú de opciones
print("\nSelecciona una opción:")
print("1. Calcular hash MD5")
print("2. Calcular hash SHA-256")
print("0. Comprobar integridad")

# Obtener la selección de la opción con manejo de errores
while True:
  try:
    seleccion_opcion = int(input("Introduce el número de la opción: "))
    if seleccion_opcion in (0, 1, 2):
      break
    else:
      print("Número de opción inválido. Inténtalo de nuevo.")
  except ValueError:
    print("Entrada inválida. Debes introducir un número.")


# Realizar la acción según la opción seleccionada
if seleccion_opcion == 0:
    hash_conocido = input("Introduce el hash conocido: ")

    # Determinar el algoritmo del hash conocido automáticamente
    if len(hash_conocido) == 32:  # Longitud de un hash MD5
        algoritmo = "MD5"
    elif len(hash_conocido) == 64:  # Longitud de un hash SHA-256
        algoritmo = "SHA-256"
    else:
        print("Longitud del hash no válida. Saliendo del programa.")
        exit()  # Salir del programa si el hash no es válido

    verificar_integridad(nombre_archivo, algoritmo, hash_conocido)

elif seleccion_opcion == 1:
    calcular_hash(nombre_archivo, "MD5")
elif seleccion_opcion == 2:
    calcular_hash(nombre_archivo, "SHA-256")

"""El programa puede calcular el hash de los archivos que están en la carpeta local, usando el algoritmo MD5 o SHA-256 y lo devuelve. También puede comprobar si el archivo ha sido modificado, comparando el hash calculado por uno conocido.
Como el nombre del archivo no afecta a su contenido no afecta al hash. Por eso, para probar el programa, calculamos primero el hash del archivo prueba. Después, al comparar ese hash con prueba - copia, como es una copia exacta, los hash coinciden y el programa indica que el archivo no ha sido modificado. En cambio, al compararlo con prueba_modificado, que sí tiene un texto distinto en su interior, el hash no coincide y el programa avisa de que ha sido modificado.
"""