# -*- coding: utf-8 -*-
"""IABD_M01_T02_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-CkMxrr7exrDd1DWgmZM_71yKuK9NhN

Usa una pequeña tabla de datos ficticios y traza la línea de regresión que mejor se ajuste a estos datos.
He decidido intentar predecir cuánto se va a gastar en gasolina
conociendo los datos de cuánto se ha gastado en semanas pasadas
y los kilómetros que se hicieron por carretera, por cuidad y estando en atasco.
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import seaborn as sns


# Crear el DataFrame con los datos
data = {
    'Km_Carretera': [100, 150, 120, 90, 80, 110, 130, 140],
    'Km_Ciudad': [20, 30, 25, 15, 35, 20, 25, 15],
    'Km_Atasco': [2, 3, 4, 6, 5, 1, 2, 1],
    'Gasto_Gasolina': [18, 24, 22, 26, 27, 20, 23, 21]
}

df = pd.DataFrame(data)

# Definir las variables independientes (X) y dependiente (Y)
X = df[['Km_Carretera', 'Km_Ciudad', 'Km_Atasco']]
Y = df['Gasto_Gasolina']

# Dividir el conjunto de datos en entrenamiento y prueba
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de regresión lineal
model = LinearRegression()
model.fit(X_train, Y_train)

# Hacer predicciones
predictions = model.predict(X_test)

# Mostrar los coeficientes y la intersección
print(f'Intersección: {model.intercept_}')
print(f'Coeficientes: {model.coef_}')

# Calcular el MSE
mse = mean_squared_error(Y_test, predictions)
print(f"Error cuadrático medio (MSE): {mse}")

# Calcular el R²
r2 = r2_score(Y_test, predictions)
print(f"R-cuadrado (R²): {r2}")

# Gráfico de pares (pair plot)
sns.pairplot(df, x_vars=['Km_Carretera', 'Km_Ciudad', 'Km_Atasco'], y_vars=['Gasto_Gasolina'], kind='reg')
plt.show()


# Predicción para una nueva semana
nueva_semana = pd.DataFrame([[100, 50, 5]], columns=['Km_Carretera', 'Km_Ciudad', 'Km_Atasco'])
gasto_previsto = model.predict(nueva_semana)
print(f'Gasto en gasolina previsto: {gasto_previsto[0]:.2f} euros')