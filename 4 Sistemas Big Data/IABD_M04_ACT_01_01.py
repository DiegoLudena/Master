# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nY9u43bWzN5EPQuIbFt-rOU46UjKENV6

EJERCICIO 1: Crea un conjunto de datos con Python que incluye información sobre clientes y los productos que han comprado, realiza las siguientes tareas con un script en Python:
"""

import pandas as pd
import numpy as np

# Crear una lista de clientes
"""
Empecé con una lista de 5 clientes a mano, pero los resultados eran siempre muy parecido.
Así puedo hacer una lista más larga y los resultado son más interesantes.
"""
num_clientes = 20
clientes = [f'Cliente {i}' for i in range(1, num_clientes + 1)]

# Crear una lista de productos
productos = ['Producto A', 'Producto B']

# Crear un DataFrame vacío
df = pd.DataFrame(columns=['Cliente', 'Producto'])

# Iterar sobre los clientes
for cliente in clientes:
    # Generar una lista de productos comprados por el cliente
    productos_comprados = np.random.choice(productos, size=np.random.randint(0, 3), replace=False)

    # Añadir los datos al DataFrame
    for producto in productos_comprados:
        df = pd.concat([df, pd.DataFrame({'Cliente': [cliente], 'Producto': [producto]})], ignore_index=True)

#Separo los clientes que compraron cada tipo de producto para poder hacer los conjuntos

# Clientes que compraron el Producto A
clientes_producto_a = df[df['Producto'] == 'Producto A']['Cliente'].unique()

# Clientes que compraron el Producto B
clientes_producto_b = df[df['Producto'] == 'Producto B']['Cliente'].unique()
# Imprimir el DataFrame
print(df)

"""1.	Unión: Determina el conjunto de clientes que han comprado al menos uno de los dos productos seleccionados (Producto A y Producto B)."""

# Unión de los dos conjuntos de clientes
clientes_union = np.union1d(clientes_producto_a, clientes_producto_b)

# Imprimir la unión de clientes
print("Clientes que han comprado al menos uno de los dos productos:")
print(clientes_union)

"""2.	Intersección: Encuentra el conjunto de clientes que han comprado ambos productos (Producto A y Producto B)."""

# Intersección de los dos conjuntos de clientes
clientes_interseccion = np.intersect1d(clientes_producto_a, clientes_producto_b)

# Imprimir la intersección de clientes
print("Clientes que han comprado ambos productos:")
print(clientes_interseccion)

"""Diferencia: Identifica los clientes que han comprado el Producto A pero no el Producto B, y viceversa."""

# Diferencia: Clientes que compraron el Producto A pero no el Producto B
clientes_a_no_b = np.setdiff1d(clientes_producto_a, clientes_producto_b)

# Diferencia: Clientes que compraron el Producto B pero no el Producto A
clientes_b_no_a = np.setdiff1d(clientes_producto_b, clientes_producto_a)

# Imprimir las diferencias
print("Clientes que han comprado el Producto A pero no el Producto B:")
print(clientes_a_no_b)
print("\nClientes que han comprado el Producto B pero no el Producto A:")
print(clientes_b_no_a)