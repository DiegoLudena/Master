# -*- coding: utf-8 -*-
"""IABD_M04_ACT_01_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xn9-VxUhvPGQwnKZlG-LpbcFDw8W3eeI

Utiliza la librería SpaCy de Python para cargar un modelo de lenguaje y procesar un texto en busca de nombres propios.
"""

#Instalar SpaCy
!pip install spacy==3.5.0

"""Descargar un modelo de lenguaje. SpaCy ofrece diferentes modelos para varios idiomas. Usaré es_core_news_sm , que es un núcelo en español"""

!python -m spacy download es_core_news_sm

"""Importar SpaCy y cargar el modelo de lenguaje"""

import spacy

nlp = spacy.load("es_core_news_sm")

"""Solicitar al usuario el texto que desea analizar"""

print("Por favor, ingresa el texto que deseas analizar (textos muy largos pueden tener un procesamiento lento).")

texto = input("Texto: ")

"""Procesar el texto con SpaCy"""

doc = nlp(texto)

"""Si solamente le pido al programa que muestre los nombres con
for ent in doc.ents:
    if ent.label_ == "PER":
        print(ent.text)
mete falsos positivos, al reconocer como nombres algunas palabras que son inicio de oración. Para intentar evitarlo voy a pedirle que se fije más en las palabras que inician oraciones.

Además, como los mismos nombres se repiten muchas veces, me parece interesante evitar que se repitan, por lo que guardo los nombres propios en un set, que elimina automáticamente los duplicados.

Me da la impresión de que al eliminar las repeticiones estoy perdiendo información, así que cambio el set por un diccionario, para que lleve la cuenta de las repeticiones, y mostrar en el resultado también cuántas veces se repite un nombre, ya que puede dar una idea de lo relevante que es el personaje en el texto.

Buscar y mostrar en consola los nombres propios encontrados
"""

# Función para filtrar falsos positivos basados en POS (Part-of-Speech)
def es_nombre_propio(entidad):
    # Verificar si la entidad tiene un POS de sustantivo o pronombre (más probable que sea un nombre propio)
    for token in entidad:
        if token.pos_ not in ["PROPN", "NOUN"]:  # PROPN es el etiquetado de nombres propios
            return False
    return True

# Utilizar un diccionario para contar las veces que aparece cada nombre
conteo_nombres = {}

# Buscar entidades nombradas que sean personas y filtrarlas usando POS tagging
for entidad in doc.ents:
    if entidad.label_ == "PER" and es_nombre_propio(entidad):
        nombre = entidad.text
        # Si el nombre ya está en el diccionario, aumentar su cuenta
        if nombre in conteo_nombres:
            conteo_nombres[nombre] += 1
        else:
            # Si no está, añadirlo con un conteo inicial de 1
            conteo_nombres[nombre] = 1

# Mostrar los nombres propios encontrados y sus repeticiones en formato tabla.
if conteo_nombres:
    print("\nNombres propios encontrados y sus repeticiones:")
    print(f"{'Nombre':<20} {'Repeticiones'}")
    print("-" * 35)
    for nombre, cuenta in conteo_nombres.items():
        print(f"{nombre:<20} {str(cuenta):^15}")
  # Al existir la posibilidad de que no hay nombres propios, tenerla en cuenta
else:
    print("\nNo se encontraron nombres propios.")