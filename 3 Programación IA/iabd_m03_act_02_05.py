# -*- coding: utf-8 -*-
"""iabd_m03_act_02_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s8q-2bR90wuetocGgtX6aw0fO50_D5K7

EJERCICIO 5: Crea un DataFrame sencillo utilizando la librería Pandas en Python. Luego, realiza algunas manipulaciones de datos como agregar una nueva columna, filtrar datos, y calcular el promedio de una columna.

Comienzo importando las librerías que necesito
Primera era solo panda, luego he necesitado faker y numpy
"""

!pip install Faker
import pandas as pd
from faker import Faker
import numpy as np

"""Primero había pensado inventarme los estudiantes, pero inventar datos de 20 estudiantes es aburrido.
Decido usar Faker para que genere datos aleatorios.
Como al ser aleatorias las notas los resultados eran feos, uso numpy para generar notas aleatorias pero que se aproximen a una normal
"""

# Inicializa Faker
fake = Faker('es_ES')  # Para nombres en español

# Genera datos para 20 estudiantes
num_estudiantes = 20
nombres = [fake.first_name() for _ in range(num_estudiantes)]
edades = [fake.random_int(min=18, max=25) for _ in range(num_estudiantes)]

# Genera notas con distribución normal (media 75, desviación estándar 10)
notas = np.random.normal(loc=5.5, scale=1.5, size=num_estudiantes)
notas = np.clip(notas, 0, 10)  # Asegura que las notas estén entre 0 y 10
notas = np.round(notas, 1)    # Redondea a un decimal

"""Con los datos, creo el Dataframe y lo muestro."""

# Crea el DataFrame
data = {'Nombre': nombres, 'Edad': edades, 'Nota': notas}
df_estudiantes = pd.DataFrame(data)

# print(df_estudiantes)

"""-	Agrega una nueva columna Aprobado que indique si la nota es mayor o igual a 5.
Para practicar un poco la programación, decido complicarlo un poco y poner categorías de notas
"""

"""
Con este código añado solamente la columna aprobado/suspenso
# Agrega la columna "Aprobado"
df_estudiantes['Aprobado'] = df_estudiantes['Nota'].apply(lambda nota: 'Aprobado' if nota >= 5.0 else 'Suspenso')
"""

def califica_nota(nota):
  if nota < 5.0:
    return 'Suspenso'
  elif nota < 6.0:
    return 'Aprobado'
  elif nota < 7.0:
    return 'Bien'
  elif nota < 9.0:
    return 'Notable'
  elif nota < 10.0:
    return 'Sobresaliente'
  else:
    return 'Matrícula'

df_estudiantes['Calificación'] = df_estudiantes['Nota'].apply(califica_nota)

print(df_estudiantes)

"""-	Filtra los estudiantes que han aprobado.
Aprovecho que tengo la Calificación de suspenso del apartado anterior

"""

# Filtra por estudiantes aprobados
aprobados = df_estudiantes[df_estudiantes['Calificación'] != 'Suspenso']

print(aprobados)

"""-	Calcula y muestra el promedio de las notas."""

# Calcula el promedio de las notas
nota_media = df_estudiantes['Nota'].mean()

# Redondea la nota media a dos decimales
nota_media_redondeada = round(nota_media, 2)


# Muestra el promedio de notas de la clase
print(f"Nota media de clase: {nota_media_redondeada}")